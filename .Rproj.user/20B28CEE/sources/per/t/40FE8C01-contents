---
title: "stress_ictus_models"
output: html_document
date: '2022-09-07'
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

```{r packages}
#library(xtable)
library("tidyverse")
#library("rstanarm")
#library("bayesplot")
library("lme4")

library("ggplot2")
#library("broom")


# default plotting theme
#theme_set(bayesplot::theme_default(base_size = 15))

# note: the line below to run chains in parallel (saves time)
#options(mc.cores = parallel::detectCores())
```



```{r strictus_df}
summary(strictus_data)
#print(s1)

```

```{r}

```

```{r strict_durs, echo = FALSE}
ggplot(strictus_data,aes(ictus,duration)) + 
  geom_jitter(color = "violet", alpha = 0.5) +
  facet_wrap("song")
ggplot(strictus_data,aes(stressed,duration)) + 
  geom_jitter(color = "orange", alpha = 0.5) +
  facet_wrap("song")

ggplot(strictus_data,aes(ictus,duration)) + 
  geom_jitter(color = "violet", alpha = 0.5) +
  facet_wrap("performer")
ggplot(strictus_data,aes(stressed,duration)) + 
  geom_jitter(color = "orange", alpha = 0.5) +
  facet_wrap("performer")
```

```{r interaction, echo = FALSE}
interaction.plot(strictus_data$stressed,strictus_data$ictus,strictus_data$duration,xlab="stressed",ylab="mean vowel duration(ms)",trace.label = "beat")

#interaction.plot(strictus_data$stressed, strictus_data$quantity,strictus_data$duration, xlab = "stressed", ylab = "mean vowel duration(ms)",trace.label = "quantity")

```

```{r boxdur, echo = FALSE}
boxplot(duration~stressed+ictus,data= strictus_data,xlab = "word-level (stressed) and song-level (beat) prominence",ylab = "mean vowel duration",notch = TRUE,
        col=c("pink","gray","pink","gray"),legend = TRUE)
```

```{r}
p <- ggplot(strictus_data,aes(x=stressed,y=duration, color = ictus))
p + geom_boxplot(notch = TRUE)
```

```{r}
methods(xtable)
```

```{r}
lindesignmod <- lmer(duration ~ ictus + stressed + ictus*stressed + (1|song) + (1|performer), data = strictus_data, REML = FALSE)
s1 <- summary(lindesignmod)
print(s1, digits=3)


```

```{r}

```

```{r}
linsimpmod <- lmer(duration ~ ictus + stressed  + quantity + (1|song) + (1|performer), data = strictus_data, REML = FALSE)
s2 <- summary(linsimpmod)
print(s2)
```

# for presentation, make sure transparent labels and readable.

```{r}
comp1 <- anova(lindesignmod,linsimpmod)
print(comp1)
```

```{r}
linnullmod <- lmer(duration ~ (1|song) + (1|performer), data = strictus_data, REML = FALSE)
n1 <- summary(linnullmod)
print(n1)
```

```{r}
comp2 <- anova(lindesignmod,linnullmod)
print(comp2)
```

```{r}
comp3 <- anova(linsimpmod, linnullmod)
print(comp3)
```

#now we look at vowel dispersion: for each speaker, the (F1, F2) center of the vowel space was calculated from three corner vowels /i,a,u/. The coordinates of each vowel token's (F1, F2) measurements are then used to calculate the distance of the vowel from the center of the vowel space. This transformation accounts for physiological variation across singers, and also for differences in vowel quality.

```{r}
ggplot(strictus_data,aes(ictus,euclid)) + 
  geom_jitter(color = "violet", alpha = 0.5) +
  facet_wrap("song")
ggplot(strictus_data,aes(stressed,euclid)) + 
  geom_jitter(color = "orange", alpha = 0.5) +
  facet_wrap("song")

ggplot(strictus_data,aes(ictus,euclid)) + 
  geom_jitter(color = "violet", alpha = 0.5) +
  facet_wrap("performer")
ggplot(strictus_data,aes(stressed,euclid)) + 
  geom_jitter(color = "orange", alpha = 0.5) +
  facet_wrap("performer")
```

```{r}
interaction.plot(strictus_data$stressed,strictus_data$ictus,strictus_data$euclid)
#interaction.plot(strictus_data$quantity, strictus_data$ictus,strictus_data$euclid)


```

```{r}

```

#vowels allowed in all positions! filter.

```{r}
spacedesign <- lmer(euclid ~ stressed + ictus + quantity  + (1|performer) + (1|song), data = strictus_data, REML= FALSE)
summary(spacedesign)

```

```{r}

```

```{r}
mxrand <- stan_lmer(duration ~ ictus+stressed+quantity+ictus*stressed +(1|song) + (1|performer),data=strictus_data)
summary(mxrand)
```

```{r}
launch_shinystan(mxrand)
#summary(mxrand)
```

```{r}
mxperf <- stan_lmer(duration~ictus+stressed+quantity+ictus*stressed +(1|performer),data=strictus_data)
summary(mxperf)
```

```{r}
spmod <- stan_lmer(euclid~ictus+stressed+quantity+ictus*stressed+(1|performer)+(1|song), data = strictus_data)
#summary(spmod)
```

```{r}
launch_shinystan(spmod)
```
